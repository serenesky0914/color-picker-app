{"version":3,"sources":["image-color-picker/Canvas.js","image-color-picker/Color.js","image-color-picker/ImageColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","React","memo","loadedImg","imgUrl","sizeX","sizeY","roundness","getCtx","canvasrRef","useRef","useLayoutEffect","setCanvas","img","imgSize","x","y","finalWidth","finalHeight","imgRatio","Math","round","calcImgSize","width","height","current","ctx","drawImage","getContext","initialImg","Image","onload","src","ref","style","borderRadius","Color","color","pos","mouseDown","onColorPickedText","showRGB","zindex","translate","pStyle","left","top","zIndex","transform","dotStyle","background","display","id","className","ImageColorPicker","props","setState","getColor","imgData","state","getImageData","data","onMouseDown","e","nativeEvent","offsetX","offsetY","onMouseUp","onColorPicked","onMouseMove","onColorPicking","onTouchMove","preventDefault","bcr","target","getBoundingClientRect","targetTouches","clientX","clientY","onFileChange","fileInp","files","URL","createObjectURL","pickerMaxSize","undefined","createRef","touchCatcher","this","addEventListener","passive","removeEventListener","borderColor","onTouchEnd","cursor","type","onChange","selectImgButton","Component","App","changeTitle","document","title","changeColor","getResponsiveWidth","maxWidth","screenWidth","onScreenResize","window","screen","textShadow","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04bfbb2f.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect } from 'react';\r\n\r\nconst Canvas = React.memo(({ loadedImg, imgUrl, sizeX, sizeY, roundness, getCtx }) => {\r\n  const canvasrRef = useRef();\r\n\r\n  useLayoutEffect(() => {    \r\n    const calcImgSize = (x,y) => {\r\n      let imgRatio = x / y;\r\n      let setRatio = sizeX / sizeY;      \r\n      let finalWidth, finalHeight;\r\n      if (imgRatio > setRatio) {\r\n        finalWidth = sizeX;\r\n        finalHeight = Math.round( sizeX / imgRatio );\r\n      } else {\r\n        finalWidth = Math.round( sizeY * imgRatio );\r\n        finalHeight = sizeY;\r\n      }\r\n      return [ finalWidth, finalHeight]\r\n    }\r\n    const setCanvas = (img) => {\r\n      let imgSize = calcImgSize(img.width, img.height);\r\n      canvasrRef.current.width = imgSize[0];\r\n      canvasrRef.current.height = imgSize[1];\r\n      ctx.drawImage(img, 0, 0, imgSize[0], imgSize[1]);\r\n    }\r\n\r\n    const ctx = canvasrRef.current.getContext(\"2d\");\r\n    \r\n    if (loadedImg) {\r\n      setCanvas(loadedImg);\r\n    } else {      \r\n      const initialImg = new Image();\r\n      initialImg.onload = () => {\r\n        setCanvas(initialImg);\r\n      }\r\n      initialImg.src = imgUrl;\r\n    } \r\n    getCtx(ctx);\r\n  },[loadedImg, imgUrl, getCtx, sizeY, sizeX ]);\r\n    \r\n    return (\r\n      <canvas ref={canvasrRef} style={{borderRadius:roundness-13}} width={ sizeX } height={ sizeY } />\r\n    );\r\n})\r\n\r\nexport default Canvas;\r\n","import React from 'react';\r\nimport './Color.css';\r\n\r\nconst Color = ({ color, pos, mouseDown, onColorPickedText, showRGB, width }) => {\r\n    let zindex = (mouseDown===false) ? 3 : 1;\r\n    let translate =  ( pos[0] > width-133 ) ? 'translate(calc(-100% - 18px), 0px)' : 'none';\r\n    const pStyle = { left:pos[0]+8, top:pos[1]+8, zIndex:zindex, transform: translate };\r\n    const dotStyle = { left: pos[0]-9, top: pos[1]-9, background: color };\r\n    let display = showRGB ? 'show' : 'hide';\r\n\r\n    const renderP = () => {\r\n        if (mouseDown) {  \r\n            return <p  id='showinfo' className={display} style={pStyle}>{color}</p>\r\n        } else if (mouseDown === false) {\r\n            return <p id='showinfo' style={pStyle} ><span className={display}>{color}</span> {onColorPickedText} </p>\r\n        } else {\r\n            return <p id='showinfo' style={pStyle} >Select the color</p>\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div >\r\n        <div id='pointer' style={dotStyle}></div>\r\n            { renderP() }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Color;\r\n","// Image color Picker created by Roman FlÃ¶ssler - https://github.com/Roman-Flossler\r\n\r\nimport React, { Component } from 'react';\r\nimport Canvas from './Canvas';\r\nimport Color from './Color';\r\nimport './ImageColorPicker.css';\r\n\r\nclass ImageColorPicker extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      color: '',\r\n      pos: [props.pickerMaxSize[0]/3-20, props.pickerMaxSize[1]/2-20],\r\n      ctx: null,\r\n      mouseDown: undefined,\r\n      loadedImg: undefined\r\n    }\r\n    this.fileInp = React.createRef();\r\n    this.touchCatcher = React.createRef();\r\n  }\r\n\r\n  getCtx = (ctx) => {\r\n    this.setState({ ctx: ctx });    \r\n  }\r\n\r\n  getColor = (x,y) => {\r\n    const imgData = this.state.ctx.getImageData(x, y, 1, 1);\r\n    return 'rgb(' + imgData.data[0] + ', ' + imgData.data[1] + ', ' + imgData.data[2] + ')';\r\n  }\r\n\r\n  onMouseDown = (e) => {\r\n    this.setState({  \r\n      pos: [e.nativeEvent.offsetX, e.nativeEvent.offsetY],\r\n      mouseDown: true,\r\n      color: this.getColor(e.nativeEvent.offsetX, e.nativeEvent.offsetY)\r\n    });    \r\n  }\r\n\r\n  onMouseUp = () => {\r\n    this.setState({ mouseDown: false });\r\n    this.props.onColorPicked && this.props.onColorPicked(this.state.color);\r\n  }\r\n\r\n  onMouseMove = (e) => {    \r\n    if (this.state.mouseDown) {\r\n      let color = this.getColor(e.nativeEvent.offsetX, e.nativeEvent.offsetY) \r\n      this.setState({  \r\n        pos: [e.nativeEvent.offsetX, e.nativeEvent.offsetY],\r\n        color: color\r\n      });\r\n      this.props.onColorPicking && this.props.onColorPicking(color);\r\n    }     \r\n  }\r\n  \r\n  onTouchMove = (e) => {    \r\n    e.preventDefault();    \r\n    let bcr = e.target.getBoundingClientRect();\r\n    let x = e.targetTouches[0].clientX - bcr.x;\r\n    let y = e.targetTouches[0].clientY - bcr.y;\r\n    x = x < 0 ? 0 : x;\r\n    y = y < 0 ? 0 : y;\r\n    x = x > bcr.width-1 ? bcr.width-1 : x;\r\n    y = y > bcr.height-1 ? bcr.height-1 : y;\r\n    let color = this.getColor(x, y); \r\n    this.setState({\r\n        pos: [ x , y],\r\n        mouseDown: true,\r\n        color: color\r\n      });\r\n    this.props.onColorPicking && this.props.onColorPicking(color);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.touchCatcher.current.addEventListener('touchmove', this.onTouchMove, { passive: false });\r\n  }  \r\n  componentWillUnmount() {\r\n    this.touchCatcher.current.removeEventListener('touchmove', this.onTouchMove);\r\n  }\r\n\r\n  onFileChange = () => {\r\n    let loadedImg = new Image();\r\n    loadedImg.onload = () => {\r\n      this.setState( {loadedImg: loadedImg} )    \r\n    }\r\n    if (this.fileInp.current.files[0]) {\r\n      loadedImg.src = URL.createObjectURL(this.fileInp.current.files[0]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <div style={{ borderColor: this.state.color, borderRadius: this.props.roundness }} id='frame' >\r\n        <Canvas loadedImg={this.state.loadedImg} imgUrl={this.props.imgUrl} sizeX={this.props.pickerMaxSize[0]} sizeY={this.props.pickerMaxSize[1]} \r\n                roundness={this.props.roundness} getCtx={this.getCtx} ></Canvas>\r\n        \r\n        <Color color={this.state.color} pos={this.state.pos} mouseDown={this.state.mouseDown} \r\n        onColorPickedText={this.props.onColorPickedText} showRGB={this.props.showRGB} width={this.props.pickerMaxSize[0]} ></Color>\r\n        \r\n        <div id='mousecatcher'  ref={this.touchCatcher} onMouseMove={ this.onMouseMove } onMouseDown={this.onMouseDown}  onMouseUp={ this.onMouseUp } onTouchEnd={ this.onMouseUp }\r\n        style={ { borderRadius: this.props.roundness-13, cursor: this.state.mouseDown ? 'none' : 'default'  }} ></div>\r\n      </div>\r\n      <input ref={this.fileInp} type=\"file\" onChange={this.onFileChange} style={this.props.selectImgButton ? { display:'block' } : { display:'none' } }></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageColorPicker;\r\n","import React, { Component } from 'react';\nimport ImageColorPicker from './image-color-picker/ImageColorPicker';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      color: '',\n      screenWidth: window.screen.width\n    }\n    this.onScreenResize();\n  }\n\n\nchangeTitle = (color) => {\n  document.title = ' ð¨ ' + color;\n}\n\nchangeColor = (color) => {\n  this.setState( {color: color} );  \n}\n\ngetResponsiveWidth = (width) => { \n  let maxWidth = this.state.screenWidth - 24 - this.state.screenWidth/20;\n  return width > maxWidth ? maxWidth : width;\n}\n\nonScreenResize = () => {\n  window.addEventListener('resize', () => {\n    this.setState({screenWidth: window.screen.width});\n  });\n}\n\n\n  render() {\n    return (\n        <div className=\"App\">\n        <h1 style={{color: this.state.color,  textShadow: '0 0 11px' + this.state.color }} >image Color Picker</h1>\n          <header className=\"App-header\">            \n            <ImageColorPicker imgUrl={'rgb.png'} pickerMaxSize={[300,300]} roundness={200} showRGB={true}\n                              onColorPicked={this.changeTitle} onColorPickedText={'is the new tab title'}  >\n            </ImageColorPicker>\n            <br />\n            <ImageColorPicker selectImgButton={true} imgUrl={'palette.png'} pickerMaxSize={[this.getResponsiveWidth(555),300]} onColorPicking={this.changeColor} \n                              onColorPicked={this.changeColor} roundness={16} >\n            </ImageColorPicker>\n          </header>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// The react-dom package provides DOM-specific methods that can be used at the top level of your app \n// and as an escape hatch to get outside of the React model if you need to.\n// Most of your components should not need to use this module.\n// Render a React element into the DOM in the supplied container\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}